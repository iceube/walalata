<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Blockchains on Walalata</title>
    <link>http://localhost:1313/blockchain/</link>
    <description>Recent content in Blockchains on Walalata</description>
    <generator>Hugo -- 0.148.1</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Jul 2025 18:12:47 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/blockchain/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>BitCoin: A Peer to Peer Electronic Cash System</title>
      <link>http://localhost:1313/blockchain/bitcoin-a-peer-to-peer-electronic-cash-system/</link>
      <pubDate>Wed, 23 Jul 2025 18:12:47 +0800</pubDate>
      <guid>http://localhost:1313/blockchain/bitcoin-a-peer-to-peer-electronic-cash-system/</guid>
      <description>&lt;h2 id=&#34;论文解读&#34;&gt;论文解读&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;目标&lt;/strong&gt;：一个点对点的双花问题（double-spending）解决方案&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法&lt;/strong&gt;：链式结构，hash，PoW，最长合法链，广播&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;结果&lt;/strong&gt;：不可篡改&lt;/p&gt;
&lt;h3 id=&#34;具体设计&#34;&gt;具体设计&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;交易&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;一枚电子货币是一连串数字签名（Digital signatures）：每一位所有者对前一次交易和下一位拥有者的公钥（Public Key）签署一个随机散列的数字签名，并将这个签名附加在电子货币尾部，电子货币就发送给下一位所有者。收款人通过对签名进行验证（使用发布者的公钥），就能够验证该链条的所有者。（此时并不能防范双花问题）&lt;/p&gt;
&lt;figure style=&#34;text-align&#34;&gt;
	&lt;img src=&#34;https://cdn.nakamotoinstitute.org/img/library/bitcoin/transactions.svg&#34;&gt;
	&lt;center&gt;&lt;figcaption&gt;BAPPECS-交易流程图&lt;/figcaption&gt;&lt;/center&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;时间戳服务器&lt;/strong&gt;（Timestamp Server）：（双花问题的解决）&lt;/p&gt;
&lt;p&gt;每个时间戳应当将前一个时间戳纳入 hash，形成链条&lt;/p&gt;
&lt;figure style=&#34;text-align&#34;&gt;
  &lt;img src=&#34;https://cdn.nakamotoinstitute.org/img/library/bitcoin/timestamp-server.svg&#34;&gt;
  &lt;center&gt;&lt;figcaption&gt;BAPPECS-时间戳服务器&lt;/figcaption&gt;&lt;/center&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;工作量证明&lt;/strong&gt;（Proof of Work）：&lt;/p&gt;
&lt;p&gt;SHA-256&lt;/p&gt;
&lt;p&gt;所需平均工作量与所需零位数呈指数关系，并且可以通过执行单个哈希来验证。&lt;/p&gt;
&lt;p&gt;随机数（Nonce）使得区块满足；&lt;/p&gt;
&lt;p&gt;一旦CPU耗费的工作量被用来满足工作量证明，该区块就不能在不重做工作的情况下被更改。由于后续的区块在其之后被链接，更改该区块的工作将包括重做其后的所有区块。（不可篡改）&lt;/p&gt;
&lt;figure style=&#34;text-align&#34;&gt;
  &lt;img src=&#34;https://cdn.nakamotoinstitute.org/img/library/bitcoin/proof-of-work.svg&#34;&gt;
  &lt;center&gt;&lt;figcaption&gt;BAPPECS-工作量证明&lt;/figcaption&gt;&lt;/center&gt;
&lt;/figure&gt;
&lt;p&gt;PoW 同时解决投票问题，本质是one-CPU-one-vote&lt;/p&gt;
&lt;p&gt;要修改过去的区块，攻击者必须重新完成该区块及其后所有区块的工作量证明，然后才能赶上并超过诚实节点的努力。（成功概率呈指数化递减）&lt;/p&gt;
&lt;p&gt;工作量证明的难度（the proof-of-work difficulty）采用移动平均目标的方法决定，即令难度指向令每小时生成区块的速度为某一个预定的平均数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;网络&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;新交易向全节点广播&lt;/li&gt;
&lt;li&gt;每个节点将新交易纳入一个区块&lt;/li&gt;
&lt;li&gt;每个节点都尝试在自己的区块找到一个具有足够难度的工作量证明&lt;/li&gt;
&lt;li&gt;当找到一个 proof-of-work，就向全节点广播&lt;/li&gt;
&lt;li&gt;只有当区块中的交易都是合法且不曾存在过的，其它节点才会认同该区块的有效性（只要有足够多的节点承认就可以达成共识，对丢失信息有一定的容错能力）&lt;/li&gt;
&lt;li&gt;其它节点表示接受的方法是跟随在该区块的末尾&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可能出现同时广播，各节点会在率先收到的区块基础上进行工作，僵局（tie）会在下一个工作量证明的时候被打破，其中一个会变更长，成为合法链。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;激励&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个区块的第一笔交易（特殊交易）可以创造新币（由区块构建者）。&lt;/li&gt;
&lt;li&gt;交易费（transaction fees）：输入值与输出值的差额&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;回收硬盘空间&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;Merkle tree：只有根（root）被纳入区块的 hash。老区块可以通过分枝拔除（stubbing）的方法被压缩。&lt;/p&gt;
&lt;figure style=&#34;text-align&#34;&gt;
  &lt;img src=&#34;https://cdn.nakamotoinstitute.org/img/library/bitcoin/reclaiming-disk-space.svg&#34;&gt;
  &lt;center&gt;&lt;figcaption&gt;BAPPECS-Merkle tree 示意图&lt;/figcaption&gt;&lt;/center&gt;
&lt;/figure&gt;
&lt;p&gt;设定区块生成速率是 10 分钟 1 个。不含交易信息的区块头（Block header）大小仅有 80 字节。一年产生的数据位为4.2 MB。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简化的支付确认（Simplified Payment Verification）：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用户需要保留最长合法链的区块头副本（不断向网络发起询问），可以通过 merkle 的分支通向它被加上时间戳并纳入区块的那次交易。它不能自行验证交易的有效性，但通过追溯位置，可以看到交易被接受。&lt;/p&gt;
&lt;figure style=&#34;text-align&#34;&gt;
  &lt;img src=&#34;https://cdn.nakamotoinstitute.org/img/library/bitcoin/simplified-payment-verification.svg&#34;&gt;
  &lt;center&gt;&lt;figcaption&gt; BAPPECS-确认机制&lt;/figcaption&gt;&lt;/center&gt;
&lt;/figure&gt;
&lt;p&gt;当诚实节点控制网络时，检验机制是可靠的。但是可能被计算力占优的攻击者攻击成功。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;价值的组合与分割（Combining and Splitting Value）&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Build My Simple Blog</title>
      <link>http://localhost:1313/blockchain/build-my-simple-blog/</link>
      <pubDate>Wed, 23 Jul 2025 16:48:34 +0800</pubDate>
      <guid>http://localhost:1313/blockchain/build-my-simple-blog/</guid>
      <description>&lt;h2 id=&#34;hugo-介绍&#34;&gt;Hugo 介绍&lt;/h2&gt;
&lt;p&gt;Hugo 是一个用 Go 语言编写的静态网站生成器，可以在几秒钟内渲染出完整的网站。
Hugo有三种版本：
标准版（standard）、扩展版（extended）和扩展/部署版（extended/deploy）。标准版提供核心功能，而扩展版和扩展/部署版提供高级功能。
除非特定部署需求需要扩展/部署版，官方推荐使用扩展版。&lt;/p&gt;
&lt;h2 id=&#34;开始-本地调试&#34;&gt;开始-本地调试&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;下载 Git 。&lt;/li&gt;
&lt;li&gt;下载 Hugo ,地址：&lt;a href=&#34;https://github.com/gohugoio/hugo/releases&#34;&gt;Hugo&lt;/a&gt; ，解压缩到目的目录，编辑环境变量。&lt;/li&gt;
&lt;li&gt;初始化站点&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo new site myblog  # 生成站点目录，myblog 可以是任何站点名称
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;cd&lt;/span&gt; myblog # 进入创建的站点
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;下载主题，hugo 提供很多主题&lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;Hugo themes&lt;/a&gt;，放到themes文件夹下
需要在&lt;code&gt;hugo.toml&lt;/code&gt;中指定主题名（同主题文件夹名称一致），例如：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;baseURL&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;https://example.org/&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;languageCode&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;en-us&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;title&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;My New Hugo Site&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;theme&lt;/span&gt; = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;PaperMod&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;生成第一篇文档
记得修改 draft = false，默认不渲染草稿（draft = true）.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  myblog&amp;gt;hugo new content/posts/first-post.md  # 生成 Markdown 文件
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;发现换行存在问题，查询相关资料，发现 Hugo 中的换行需要两个回车，但是可以通过修改&lt;code&gt;hugo.toml&lt;/code&gt;保持一致。添加如下代码段：
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;markup&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;goldmark&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;renderer&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;hardWraps&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;部署-netlify&#34;&gt;部署-Netlify&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;将项目托管到 Github 上
创建一个公开的仓库用来存放项目。
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-git&#34; data-lang=&#34;git&#34;&gt;git init
git add.
git commit -m &amp;#34;first commit&amp;#34;
git branch -M main
git remote add origin https://github.com/iceube/walalata.git
git push -u origin main
&lt;/code&gt;&lt;/pre&gt;如果有&lt;strong&gt;网络问题&lt;/strong&gt;，可以看看自己科学上网的代理端口是什么，修改成对应的
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-git&#34; data-lang=&#34;git&#34;&gt;# 临时使用代理（示例）
export https_proxy=http://127.0.0.1:7897 http_proxy=http://127.0.0.1:7897
git push
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;在 Netlify 上部署
参考：&lt;a href=&#34;https://hugo.opendocs.io/hosting-and-deployment/hosting-on-netlify/&#34;&gt;在 Netlify 上托管 | Hugo官方文档&lt;/a&gt;
可是使用 GitHub 账号登陆。
&lt;ul&gt;
&lt;li&gt;一些注意点：
&lt;ol&gt;
&lt;li&gt;Build command: hugo&lt;/li&gt;
&lt;li&gt;Publish directory: public&lt;/li&gt;
&lt;li&gt;添加环境变量：
key: HUGO_VERSION
value: 版本号（例如：0.148.1）&lt;/li&gt;
&lt;li&gt;修改 &lt;code&gt;hugo.toml&lt;/code&gt;中的&lt;code&gt;baseURL&lt;/code&gt;为分配给你的站点&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;后续问题&#34;&gt;后续问题&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;md 不能显示内嵌的 html
修改&lt;code&gt;hugo.toml&lt;/code&gt;，补充&lt;code&gt;unsafe = true&lt;/code&gt;，但是会和 &lt;code&gt;hardWraps&lt;/code&gt; (解决两个回车换行)冲突，看自己的需求进行取舍：
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;markup&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;goldmark&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;renderer&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;hardWraps&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;unsafe&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
  </channel>
</rss>
